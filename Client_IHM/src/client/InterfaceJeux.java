/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package client;

import static client.Communication.get;
import static client.Communication.post;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.List;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JPanel;

import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

import org.json.JSONArray;
import org.json.JSONObject;

/**
 *
 * @author florian
 */
@SuppressWarnings("serial")
public class InterfaceJeux extends javax.swing.JFrame {

    GridLayout grille;

    private String user;
    private String password;
    private String idgame;
        private String serveur;


    /**
     * Creates new form InterfaceJeux
     *
     * @param user
     * @param password
     * @throws IOException
     */
    public InterfaceJeux(String user, String password, String idgame, TestSerial2 com, LecteurJson lec,String serveur) throws IOException, InterruptedException, Exception {

        com.initialize();

        this.user = user;
        this.password = password;
        this.idgame = idgame;
        this.serveur = serveur;

        initComponents();

        printMap(lec, user, password, idgame);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Score :");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("label");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 747, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 542, Short.MAX_VALUE)
        );

        jLabel3.setText("Classement :");

        jButton1.setText("up");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("left");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("right");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("down");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel2)))
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton3)
                                .addGap(9, 9, 9))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jButton4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(77, 77, 77))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JSONObject obj = new JSONObject();
        obj.put("action", "move");
        obj.put("value", "left");
        String result = "";
        String jsonText = obj.toString();
            try {
                result = post(serveur+"/game/" + idgame + "/moves", user, password, jsonText);
            } catch (IOException e) {
                result = e.getMessage();
            }
            
            
        try {
            result = get(serveur+"/game/" + idgame, user, password);
        } catch (IOException ex) {
            Logger.getLogger(InterfaceJeux.class.getName()).log(Level.SEVERE, null, ex);
        }
                        System.out.println(result);

                        LecteurJson lec = new LecteurJson();
                        lec.Lecture(result);

                        this.printMap(lec, user, password, idgame);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       JSONObject obj = new JSONObject();
        obj.put("action", "move");
        obj.put("value", "right");
        String result = "";
        String jsonText = obj.toString();
            try {
                result = post(serveur+"/game/" + idgame + "/moves", user, password, jsonText);
            } catch (IOException e) {
                result = e.getMessage();
            }
            
            try {
            result = get(serveur+"/game/" + idgame, user, password);
        } catch (IOException ex) {
            Logger.getLogger(InterfaceJeux.class.getName()).log(Level.SEVERE, null, ex);
        }
                        System.out.println(result);

                        LecteurJson lec = new LecteurJson();
                        lec.Lecture(result);

                        this.printMap(lec, user, password, idgame);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JSONObject obj = new JSONObject();
        obj.put("action", "move");
        obj.put("value", "up");
        String result = "";
        String jsonText = obj.toString();
            try {
                result = post(serveur+"/game/" + idgame + "/moves", user, password, jsonText);
            } catch (IOException e) {
                result = e.getMessage();
            }
            
            try {
            result = get(serveur+"/game/" + idgame, user, password);
        } catch (IOException ex) {
            Logger.getLogger(InterfaceJeux.class.getName()).log(Level.SEVERE, null, ex);
        }
                        System.out.println(result);

                        LecteurJson lec = new LecteurJson();
                        lec.Lecture(result);

                        this.printMap(lec, user, password, idgame);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JSONObject obj = new JSONObject();
        obj.put("action", "move");
        obj.put("value", "down");
        String result = "";
        String jsonText = obj.toString();
            try {
                result = post(serveur+"/game/" + idgame + "/moves", user, password, jsonText);
            } catch (IOException e) {
                result = e.getMessage();
            }
            
            try {
            result = get(serveur+"/game/" + idgame, user, password);
        } catch (IOException ex) {
            Logger.getLogger(InterfaceJeux.class.getName()).log(Level.SEVERE, null, ex);
        }
                        System.out.println(result);

                        LecteurJson lec = new LecteurJson();
                        lec.Lecture(result);

                        this.printMap(lec, user, password, idgame);
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException, Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfaceJeux.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfaceJeux.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfaceJeux.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfaceJeux.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                /*try {
                 new InterfaceJeux("a","b").setVisible(true);
                 } catch (IOException e) {
                 // TODO Auto-generated catch block
                 e.printStackTrace();
                 }*/
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * @param url
     * @return la chaine json de la requete GET
     * @throws IOException
     */
    public BufferedImage checkCase(String itemSkin, String valeur, JSONArray player) throws IOException {
        //Declaration des images a fusionner
        BufferedImage image;
        BufferedImage overlay;
        BufferedImage stickMan;

        switch (itemSkin) {
            case "02010000":
                overlay = ImageIO.read(new File("bitmaps", "objet-potion.png"));
                break;
            case "02000000":
                overlay = ImageIO.read(new File("bitmaps", "objet-piece.png"));
                break;
            case "02020000":
                overlay = ImageIO.read(new File("bitmaps", "objet-coffre1.png"));
                break;
            default:
                overlay = ImageIO.read(new File("bitmaps", "vide.png"));
        }

        if (player.length() > 0) {
            stickMan = ImageIO.read(new File("bitmaps", "stick-man.png"));
            //g.dispose();

            System.out.println(player.getString(0));
        } else {
            stickMan = ImageIO.read(new File("bitmaps", "vide.png"));
        }

        switch (valeur) {

            case "00000000":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-default.png"));
                break;
            case "00000001":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-default.png"));
                break;
            case "00000002":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-default.png"));
                break;
            case "00000003":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-default.png"));
                break;

            case "00010000":
                image = ImageIO.read(new File("bitmaps/franchissable-chemin-p.png"));
                break;
            case "00010001":
                image = ImageIO.read(new File("bitmaps/franchissable-chemin-p.png"));
                break;
            case "00010002":
                image = ImageIO.read(new File("bitmaps/franchissable-chemin-p.png"));
                break;
            case "00010003":
                image = ImageIO.read(new File("bitmapsfranchissable-chemin-p.png"));
                break;

            case "00010100":
                image = ImageIO.read(new File("bitmaps/franchissable-chemin-l.png"));
                break;

            case "00010101":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-l-rot090.png"));
                break;

            case "00010102":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-l-rot180.png"));
                break;

            case "00010103":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-l-rot270.png"));
                break;

            case "00010200":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-v.png"));
                break;

            case "00010201":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-v-rot090.png"));
                break;

            case "00010202":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-v-rot180.png"));
                break;

            case "00010203":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-v-rot270.png"));
                break;

            case "00010300":
                image = ImageIO.read(new File("bitmaps/franchissable-chemin-t.png"));
                break;

            case "00010301":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-t-rot090.png"));
                break;

            case "00010302":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-t-rot180.png"));
                break;

            case "00010303":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-t-rot270.png"));
                break;

            case "00010400":
                image = ImageIO.read(new File("bitmaps/franchissable-chemin-x.png"));
                break;

            case "00010401":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-x.png"));
                break;

            case "00010402":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-x.png"));
                break;

            case "00010403":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-x.png"));
                break;

            case "00010500":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-i.png"));
                break;

            case "00010501":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-i-rot090.png"));
                break;

            case "00010502":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-i-rot180.png"));
                break;

            case "00010503":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-chemin-i-rot270.png"));
                break;

            case "00020000":
                image = ImageIO.read(new File("bitmaps/franchissable-route-p.png"));
                break;
            case "00020001":
                image = ImageIO.read(new File("bitmaps/franchissable-route-p.png"));
                break;
            case "000200002":
                image = ImageIO.read(new File("bitmaps/franchissable-route-p.png"));
                break;
            case "00020003":
                image = ImageIO.read(new File("bitmaps/franchissable-route-p.png"));
                break;
            case "00020100":
                image = ImageIO.read(new File("bitmaps/franchissable-route-i.png"));
                break;
            case "00020101":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-i-rot090.png"));
                break;
            case "00020102":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-i-rot180.png"));
                break;
            case "00020103":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-i-rot270.png"));
                break;
            case "00020200":
                image = ImageIO.read(new File("bitmaps/franchissable-route-v.png"));
                break;
            case "00020201":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-v-rot090.png"));
                break;
            case "00020202":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-v-rot180.png"));
                break;
            case "00020203":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-v-rot270.png"));
                break;
            case "00020300":
                image = ImageIO.read(new File("bitmaps/franchissable-route-t.png"));
                break;
            case "00020301":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-t-rot090.png"));
                break;
            case "00020302":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-t-rot180.png"));
                break;
            case "00020303":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-t-rot270.png"));
                break;
            case "00020400":
                image = ImageIO.read(new File("bitmaps/franchissable-route-x.png"));
                break;
            case "00020401":
                image = ImageIO.read(new File("bitmaps/franchissable-route-x.png"));
                break;
            case "00020402":
                image = ImageIO.read(new File("bitmaps/franchissable-route-x.png"));
                break;
            case "00020403":
                image = ImageIO.read(new File("bitmaps/franchissable-route-x.png"));
                break;
            case "00020500":
                image = ImageIO.read(new File("bitmaps/franchissable-route-l.png"));
                break;
            case "00020501":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-l-rot090.png"));
                break;
            case "00020502":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-l-rot180.png"));
                break;
            case "00020503":
                image = ImageIO.read(new File("bitmaps/rotated/franchissable-route-l-rot270.png"));
                break;
            case "00030000":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-primary.png"));
                break;
            case "00030001":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-primary.png"));
                break;
            case "00030002":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-primary.png"));
                break;
            case "00030003":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-primary.png"));
                break;
            case "00040000":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-secondary.png"));
                break;
            case "00040001":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-secondary.png"));
                break;
            case "00040002":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-secondary.png"));
                break;
            case "00040003":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-secondary.png"));
                break;
            case "00050000":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-fake.png"));
                break;
            case "00050001":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-fake.png"));
                break;
            case "00050002":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-fake.png"));
                break;
            case "00050003":
                image = ImageIO.read(new File("bitmaps/franchissable-ground-fake.png"));
                break;
            case "01000000":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-default.png"));
                break;
            case "01000001":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-default.png"));
                break;
            case "01000002":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-default.png"));
                break;
            case "01000003":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-default.png"));
                break;
            case "01010000":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-p.png"));
                break;
            case "01010001":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-p.png"));
                break;
            case "01010002":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-p.png"));
                break;
            case "01010003":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-p.png"));
                break;
            case "01010100":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-l.png"));
                break;
            case "01010101":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-l-rot090.png"));
                break;
            case "01010102":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-l-rot180.png"));
                break;
            case "01010103":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-l-rot270.png"));
                break;
            case "01010200":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-v.png"));
                break;
            case "01010201":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-v-rot090.png"));
                break;
            case "01010202":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-v-rot180.png"));
                break;
            case "01010203":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-v-rot270.png"));
                break;
            case "01010300":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-t.png"));
                break;
            case "01010301":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-t-rot090.png"));
                break;
            case "01010302":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-t-rot180.png"));
                break;
            case "01010303":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-t-rot270.png"));
                break;
            case "01010400":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-x.png"));
                break;
            case "01010401":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-x.png"));
                break;
            case "01010402":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-x.png"));
                break;
            case "01010403":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-x.png"));
                break;
            case "01010500":
                image = ImageIO.read(new File("bitmaps/infranchissable-chemin-i.png"));
                break;
            case "01010501":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-i-rot090.png"));
                break;
            case "01010502":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-i-rot180.png"));
                break;
            case "01010503":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-chemin-i-rot270.png"));
                break;
            case "01020000":
                image = ImageIO.read(new File("infranchissable-route-p.png"));
                break;
            case "01020001":
                image = ImageIO.read(new File("bitmaps/infranchissable-route-p.png"));
                break;
            case "01020002":
                image = ImageIO.read(new File("bitmaps/infranchissable-route-p.png"));
                break;
            case "01020003":
                image = ImageIO.read(new File("bitmaps/infranchissable-route-p.png"));
                break;
            case "01020100":
                image = ImageIO.read(new File("bitmaps/infranchissable-route-i.png"));
                break;
            case "01020101":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-i-rot090.png"));
                break;
            case "01020102":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-i-rot180.png"));
                break;
            case "01020103":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-i-rot270.png"));
                break;
            case "01020200":
                image = ImageIO.read(new File("infranchissable-route-v.png"));
                break;
            case "01020201":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-v-rot090.png"));
                break;
            case "01020202":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-v-rot180.png"));
                break;
            case "01020203":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-v-rot270.png"));
                break;
            case "01020300":
                image = ImageIO.read(new File("infranchissable-route-t.png"));
                break;
            case "01020301":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-t-rot090.png"));
                break;
            case "01020302":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-t-rot180.png"));
                break;
            case "01020303":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-t-rot270.png"));
                break;
            case "01020400":
                image = ImageIO.read(new File("bitmaps/infranchissable-route-x.png"));
                break;
            case "01020401":
                image = ImageIO.read(new File("bitmaps/infranchissable-route-x.png"));
                break;
            case "01020402":
                image = ImageIO.read(new File("bitmaps/infranchissable-route-x.png"));
                break;
            case "01020403":
                image = ImageIO.read(new File("bitmaps/infranchissable-route-x.png"));
                break;
            case "01020500":
                image = ImageIO.read(new File("bitmaps/infranchissable-route-l.png"));
                break;
            case "01020501":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-l-rot090.png"));
                break;
            case "01020502":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-l-rot180.png"));
                break;
            case "01020503":
                image = ImageIO.read(new File("bitmaps/rotated/infranchissable-route-l-rot270.png"));
                break;
            case "01030000":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-primary.png"));
                break;
            case "01030001":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-primary.png"));
                break;
            case "01030002":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-primary.png"));
                break;
            case "01030003":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-primary.png"));
                break;
            case "01040000":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-secondary.png"));
                break;
            case "01040001":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-secondary.png"));
                break;
            case "01040002":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-secondary.png"));
                break;
            case "01040003":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-secondary.png"));
                break;
            case "01050000":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-fake.png"));
                break;
            case "01050001":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-fake.png"));
                break;
            case "01050002":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-fake.png"));
                break;
            case "01050003":
                image = ImageIO.read(new File("bitmaps/infranchissable-ground-fake.png"));
                break;

            default:
                image = ImageIO.read(new File("bitmaps/infranchissable-route-p.png"));
        }

        // create the new image, canvas size is the max. of both image sizes
        int w = Math.max(image.getWidth(), overlay.getWidth());
        int h = Math.max(image.getHeight(), overlay.getHeight());
        BufferedImage combined = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB);

        // paint both images, preserving the alpha channels
        Graphics g = combined.getGraphics();
        g.drawImage(image, 0, 0, null);
        g.drawImage(overlay, w / 2 - overlay.getWidth() / 2, h / 2 - overlay.getHeight() / 2, null);
        g.drawImage(stickMan, w / 2 - stickMan.getWidth() / 2, h / 2 - stickMan.getHeight() / 2, null);

        if (player.length() > 0) {
            Graphics name = combined.getGraphics();
            name.setFont(name.getFont().deriveFont(20f));
            name.drawString(player.getString(0), 0, combined.getHeight());
        }

        return combined;
    }

    public void printMap(LecteurJson lec, String user, String password, String idgame) {

        jPanel1.removeAll();

        jPanel1.setLayout(new GridLayout(lec.getWidth(), lec.getHeight(), 0, 0));
        Border blackline = BorderFactory.createLineBorder(Color.black, 1);

        for (int i = 0; i < (lec.getWidth() * lec.getHeight()); i++) {
            JSONArray map = lec.getMapView().getJSONArray(i);
            JSONObject donner = map.getJSONObject(0);
            String valeur = donner.getString("skin");
            JSONObject containt = donner.getJSONObject("contains");
            JSONArray player = donner.getJSONArray("players");
            String itemSkin = containt.getString("skin");

            JPanel caseGrille = new JPanel();
            //Suprime les marge entre les images
            caseGrille.setBorder(new EmptyBorder(-5, -5, -5, -5));

            JLabel images = null;
            try {
                images = new JLabel(new ImageIcon(checkCase(itemSkin, valeur, player)));

            } catch (IOException e) {
                System.out.println(e);
            }

            //caseGrille.setLayout(new BorderLayout());
            caseGrille.add(images);
            //caseGrille.add(item);
            //caseGrille.setBorder(blackline);
            jPanel1.add(caseGrille);
        }
        jPanel1.setBorder(blackline);

        jLabel2.removeAll();
        jLabel2.setText(Integer.toString(lec.getInvCoins()));

        jTextArea1.setText("");
        for (int i = 0; i < lec.getRanking().length(); i++) {
            jTextArea1.append("  " + lec.getRanking().getString(i) + "\n");

        }
        jTextArea1.setEditable(false);
        jPanel1.revalidate();
    }

}
